rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Security Functions
    function isSignedIn() {
      return request.auth != null;
    }
    function isSignedInWithUser(userId) {
      return request.auth.uid == userId;
    }
    function hasRole(role) {
      return request.auth.token.role == role;
    }
    function hasAnyRole(roles) {
      return request.auth.token.role in roles;
    }

    // Spaces
    match /spaces/{spaceId} {
      allow read: if isSignedIn() && hasAnyRole(['read','edit','write','admin']);
      allow write: if isSignedIn() && hasRole('admin');

      // Translations
      match /translations/{translationId} {
        allow read: if isSignedIn() && hasAnyRole(['read','edit','write','admin']);
        allow create, delete: if isSignedIn() && hasAnyRole(['write','admin']);
        allow update: if isSignedIn() && hasAnyRole(['edit','write','admin']);
      }
    }

    // Users
    match /users/{userId} {
      allow read: if isSignedIn() && ( isSignedInWithUser(userId) || hasRole('admin') );
      allow write: if isSignedIn() && hasRole('admin');
    }

    // Configs Setup
    match /configs/setup {
      allow read: if isSignedIn() && hasRole('admin');
      allow write: if isSignedIn() && hasRole('admin');
    }

    // Configs
    match /configs/{configId} {
      allow read: if isSignedIn() && hasRole('admin');
      allow write: if isSignedIn() && hasRole('admin');
    }

    match /{document=**} {
      allow read: if isSignedIn() && hasAnyRole(['read','write','admin']);
      allow write: if isSignedIn() && hasRole('admin');
    }
  }
}
